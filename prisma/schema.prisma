generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                     Int                    @id @default(autoincrement())
  name                   String                 @db.VarChar(100)
  position               String                 @db.VarChar(50)
  phone                  String?                @db.VarChar(20)
  daily_wage             Decimal                @default(0) @db.Decimal(10, 2)
  current_balance        Decimal                @default(0) @db.Decimal(10, 2)
  total_bonuses          Decimal                @default(0) @db.Decimal(10, 2)
  total_deductions       Decimal                @default(0) @db.Decimal(10, 2)
  payment_status         String                 @default("pending") @db.VarChar(20)
  is_active              Boolean                @default(true)
  hire_date              DateTime               @default(dbgenerated("CURRENT_DATE")) @db.Date
  last_payment_date      DateTime?              @db.Date
  created_at             DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?              @default(now()) @updatedAt @db.Timestamptz(6)
  attendance             Attendance[]
  financial_transactions FinancialTransaction[]
  salary_payments        SalaryPayment[]

  @@index([is_active], map: "idx_employees_active")
  @@index([position], map: "idx_employees_position")
  @@map("employees")
}

model Attendance {
  id              Int       @id @default(autoincrement())
  employee_id     Int
  attendance_date DateTime  @db.Date
  status          String    @db.VarChar(10)
  check_in_time   DateTime? @db.Time(6)
  check_out_time  DateTime? @db.Time(6)
  notes           String?
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  employee        Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([employee_id, attendance_date], name: "employee_id_attendance_date")
  @@index([attendance_date], map: "idx_attendance_date")
  @@index([employee_id, attendance_date], map: "idx_attendance_employee_date")
  @@map("attendance")
}

model FinancialTransaction {
  id               Int       @id @default(autoincrement())
  employee_id      Int
  transaction_type String    @db.VarChar(20)
  amount           Decimal   @db.Decimal(10, 2)
  description      String?
  transaction_date DateTime  @default(dbgenerated("CURRENT_DATE")) @db.Date
  created_by       String?   @db.VarChar(100)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  employee         Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([transaction_date], map: "idx_financial_transactions_date")
  @@index([employee_id], map: "idx_financial_transactions_employee")
  @@index([transaction_type], map: "idx_financial_transactions_type")
  @@map("financial_transactions")
}

model SalaryPayment {
  id                Int       @id @default(autoincrement())
  employee_id       Int
  payment_date      DateTime  @db.Date
  daily_wage        Decimal   @db.Decimal(10, 2)
  days_worked       Int       @default(1)
  total_wage        Decimal   @db.Decimal(10, 2)
  total_bonuses     Decimal   @default(0) @db.Decimal(10, 2)
  total_deductions  Decimal   @default(0) @db.Decimal(10, 2)
  total_withdrawals Decimal   @default(0) @db.Decimal(10, 2)
  net_payment       Decimal   @db.Decimal(10, 2)
  payment_method    String?   @default("cash") @db.VarChar(20)
  notes             String?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  employee          Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([payment_date], map: "idx_salary_payments_date")
  @@index([employee_id], map: "idx_salary_payments_employee")
  @@map("salary_payments")
}